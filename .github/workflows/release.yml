name: Build and Push Docker Image

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  SERVICE_IMAGE_NAME: "keboola/mcp-server"
  # SERVICE_ECR_REPOSITORY: "keboola/mcp-server"
  # SERVICE_ECR_PUSH_ROLE: "arn:aws:iam::968984773589:role/kbc-ecr-ApiServicePushRole-fG1HxhQrB2KA"
  # SERVICE_ECR_REGION: "us-east-1"
  # SERVICE_ACR_REPOSITORY: "mcp-server"
  # SERVICE_ACR_REGISTRY: "keboola.azurecr.io"
  # SERVICE_ACR_USERNAME: "mcp-server-push"
  GCP_REGISTRY: "us-central1-docker.pkg.dev"
  GCP_REPOSITORY: "keboola-prod-artifacts/mcp-server"
  GCP_IMAGE_NAME: "mcp-server"
  GCP_IDENTITY_PROVIDER: "projects/388088979044/locations/global/workloadIdentityPools/github/providers/github"
  GCP_SERVICE_ACCOUNT: "mcp-server-ci-push@keboola-prod-artifacts.iam.gserviceaccount.com"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.SERVICE_IMAGE_NAME }}
            ${{ env.GCP_REGISTRY }}/${{ env.GCP_REPOSITORY }}/${{ env.GCP_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=long
            type=raw,value=dev-{{sha}},enable=${{ github.event_name == 'pull_request' }}
            type=raw,value=production-{{sha}},enable={{is_default_branch}}
            type=raw,value=canary-orion-{{sha}},enable={{is_default_branch}}

      - name: Determine tags to push
        id: determine_tags
        # Make GCP_REGISTRY available to the script
        env:
          GCP_REGISTRY: ${{ env.GCP_REGISTRY }}
        shell: bash
        run: |
          ALLOWED_TAGS_LIST=()
          echo "Evaluating tags: ${{ steps.meta.outputs.tags }}"
          echo "Event: ${{ github.event_name }}, Ref: ${{ github.ref }}"

          # Read all tags into a variable, preserving newlines
          ALL_TAGS="${{ steps.meta.outputs.tags }}"

          # Iterate over each tag line
          while IFS= read -r current_tag; do
            # Skip empty lines
            [[ -z "$current_tag" ]] && continue

            echo "Processing tag: [$current_tag]"
            # Only consider GAR tags for pushing
            if [[ "$current_tag" == ${GCP_REGISTRY}* ]]; then
                tag_suffix=$(echo "$current_tag" | cut -d':' -f2)
                echo "  Type: GAR, Suffix: $tag_suffix"
                should_add=false
                # Conditional logic for GAR tags
                if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
                  if [[ "$tag_suffix" == production-* ]] || [[ "$tag_suffix" == canary-orion-* ]]; then
                    should_add=true
                    echo "  Adding (Main branch - prod/canary GAR)"
                  else
                     echo "  Skipping (Main branch - non-prod/canary GAR)"
                  fi
                elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
                  if [[ "$tag_suffix" != production-* ]] && [[ "$tag_suffix" != canary-orion-* ]]; then
                     should_add=true
                     echo "  Adding (PR - non-prod/canary GAR)"
                  else
                      echo "  Skipping (PR - prod/canary GAR)"
                  fi
                else
                    echo "  Skipping (Unknown event/ref condition)"
                fi

                if [[ "$should_add" == true ]]; then
                  ALLOWED_TAGS_LIST+=("$current_tag")
                fi
            else
                echo "  Type: Non-GAR - Skipping"
            fi
          done <<< "$ALL_TAGS" # Feed the tags using a Here String

          echo "Final list count: ${#ALLOWED_TAGS_LIST[@]}"

          # Join the array elements with a comma and set output
          if [[ ${#ALLOWED_TAGS_LIST[@]} -gt 0 ]]; then
            printf -v ALLOWED_TAGS_CSV '%s,' "${ALLOWED_TAGS_LIST[@]}"
            FINAL_TAGS="${ALLOWED_TAGS_CSV%,}" # Remove trailing comma
            echo "Final tags for output: [$FINAL_TAGS]"
            echo "tags=$FINAL_TAGS" >> "$GITHUB_OUTPUT"
          else
            echo "No tags determined to be pushed. Setting output to empty."
            echo "tags=" >> "$GITHUB_OUTPUT"
          fi

      # DEBUG: Print the determined tags
      - name: Debug Print Tags Output
        run: |
          echo "Determined tags output: ${{ steps.determine_tags.outputs.tags }}"

      - id: 'authGcp'
        name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          create_credentials_file: true
          workload_identity_provider: ${{ env.GCP_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GCP_REGISTRY }}
          username: oauth2accesstoken
          password: ${{ steps.authGcp.outputs.access_token }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile # Explicitly specify the Dockerfile path
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.determine_tags.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trigger image tag update
        if: github.ref == 'refs/heads/main'
        uses: keboola/kbc-stacks/.github/actions/trigger-image-tag-update@main
        with:
          helm-chart: "mcp-server"
          image-tag: canary-orion-${{ github.sha }}
          github-app-private-key: ${{ secrets.GITOPS_KBC_STACKS_TRIGGER_APP_PVK }}

      - name: Save Docker image info
        if: github.event_name != 'pull_request'
        run: |
          echo "Docker Image: ${{ env.GCP_REGISTRY }}/${{ env.GCP_IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}" > docker-image-info.md
          echo "Tags: ${{ steps.meta.outputs.tags }}" >> docker-image-info.md
          echo "Labels: ${{ steps.meta.outputs.labels }}" >> docker-image-info.md
