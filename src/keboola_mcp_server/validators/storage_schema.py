# generated by datamodel-codegen:
#   filename:  storage-schema.json
#   timestamp: 2025-05-26T12:28:17+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Extra, Field


class SourceSearch(BaseModel):
    key: str = Field(..., description='Search key')
    value: str = Field(..., description='Search value')


class ColumnType(BaseModel):
    source: str = Field(..., description='Source column name')
    type: Optional[str] = Field(None, description='Column data type')
    destination: Optional[str] = Field(None, description='Destination column name')
    length: Optional[str] = Field(None, description='Column length')
    nullable: Optional[bool] = Field(None, description='Whether column is nullable')
    convert_empty_values_to_null: Optional[bool] = Field(None, description='Convert empty values to NULL')
    compression: Optional[str] = Field(None, description='Column compression')


class WhereOperator(Enum):
    eq = 'eq'
    ne = 'ne'


class Tables(BaseModel):
    source: str = Field(..., description='Table identifier in Storage')
    source_branch_id: Optional[str] = Field(None, description='Source branch ID')
    source_search: Optional[SourceSearch] = Field(None, description="Deprecated, use 'source' instead")
    destination: Optional[str] = Field(None, description='Destination table name in component')
    days: Optional[int] = Field(0, description="Deprecated, use 'changed_since' instead")
    changed_since: Optional[str] = Field(None, description='Filter by last change date')
    columns: Optional[List[str]] = Field(None, description='Columns to include')
    column_types: Optional[List[ColumnType]] = None
    where_column: Optional[str] = Field(None, description='Column to filter on')
    where_values: Optional[List[str]] = Field(None, description='Values to filter by')
    where_operator: Optional[WhereOperator] = Field(WhereOperator.eq, description='Operator for filtering')
    limit: Optional[int] = Field(None, description='Limit number of rows')
    overwrite: Optional[bool] = Field(False, description='Whether to overwrite existing data')
    use_view: Optional[bool] = Field(False, description='Whether to use view')
    keep_internal_timestamp_column: Optional[bool] = Field(
        True, description='Whether to keep internal timestamp column'
    )


class Tables1(BaseModel):
    source: Optional[str] = Field(None, description='Table identifier in Storage')
    source_branch_id: Optional[str] = Field(None, description='Source branch ID')
    source_search: SourceSearch = Field(..., description="Deprecated, use 'source' instead")
    destination: Optional[str] = Field(None, description='Destination table name in component')
    days: Optional[int] = Field(0, description="Deprecated, use 'changed_since' instead")
    changed_since: Optional[str] = Field(None, description='Filter by last change date')
    columns: Optional[List[str]] = Field(None, description='Columns to include')
    column_types: Optional[List[ColumnType]] = None
    where_column: Optional[str] = Field(None, description='Column to filter on')
    where_values: Optional[List[str]] = Field(None, description='Values to filter by')
    where_operator: Optional[WhereOperator] = Field(WhereOperator.eq, description='Operator for filtering')
    limit: Optional[int] = Field(None, description='Limit number of rows')
    overwrite: Optional[bool] = Field(False, description='Whether to overwrite existing data')
    use_view: Optional[bool] = Field(False, description='Whether to use view')
    keep_internal_timestamp_column: Optional[bool] = Field(
        True, description='Whether to keep internal timestamp column'
    )


class Match(Enum):
    include = 'include'
    exclude = 'exclude'


class Tag(BaseModel):
    name: str = Field(..., description='Tag name')
    match: Optional[Match] = Field(Match.include, description='Whether to include or exclude files with this tag')


class Source(BaseModel):
    tags: Optional[List[Tag]] = None


class File(BaseModel):
    file_ids: Optional[List[str]] = Field(None, description='List of file IDs to download')
    tags: Optional[List[str]] = Field(None, description="Deprecated, use 'source.tags' instead")
    source: Optional[Source] = None
    query: Optional[str] = Field(
        None,
        description="Query to filter files, deprecated, use any of 'changed_since', 'file_ids', 'source.tags' instead.",
    )
    limit: Optional[int] = Field(None, description='Limit number of files')
    overwrite: Optional[bool] = Field(True, description='Whether to overwrite existing files')
    processed_tags: Optional[List[str]] = Field(
        None, description='List of processed tags, deprecated, use changed_since instead'
    )
    changed_since: Optional[str] = Field(
        None, description="Filter by last change date or 'adaptive' for dynamic filtering"
    )


class Input(BaseModel):
    read_only_storage_access: Optional[bool] = None
    tables: Optional[List[Union[Tables, Tables1]]] = None
    files: Optional[List[File]] = None


class DataTypeSupport(Enum):
    authoritative = 'authoritative'
    hints = 'hints'
    none = 'none'


class TableModifications(Enum):
    none = 'none'
    non_destructive = 'non-destructive'
    all = 'all'


class DeleteWhereOperator(Enum):
    eq = 'eq'
    ne = 'ne'


class Operator(Enum):
    eq = 'eq'
    ne = 'ne'


class ValuesFromWorkspace(BaseModel):
    workspace_id: Optional[str] = Field(None, description='Workspace ID')
    table: str = Field(..., description='Table name')
    column: Optional[str] = Field(None, description='Column name')


class ValuesFromStorage(BaseModel):
    bucket_id: str = Field(..., description='Bucket ID')
    table: str = Field(..., description='Table name')
    column: Optional[str] = Field(None, description='Column name')


class WhereFilters(BaseModel):
    column: str = Field(..., description='Column to filter on')
    operator: Optional[Operator] = Field(Operator.eq, description='Filter operator')
    values_from_set: List[str] = Field(..., description='Values to filter by')
    values_from_workspace: Optional[ValuesFromWorkspace] = None
    values_from_storage: Optional[ValuesFromStorage] = None


class WhereFilters1(BaseModel):
    column: str = Field(..., description='Column to filter on')
    operator: Optional[Operator] = Field(Operator.eq, description='Filter operator')
    values_from_set: List[str] = Field(..., description='Values to filter by')
    values_from_workspace: ValuesFromWorkspace
    values_from_storage: Optional[ValuesFromStorage] = None


class WhereFilters2(BaseModel):
    column: str = Field(..., description='Column to filter on')
    operator: Optional[Operator] = Field(Operator.eq, description='Filter operator')
    values_from_set: List[str] = Field(..., description='Values to filter by')
    values_from_workspace: ValuesFromWorkspace
    values_from_storage: ValuesFromStorage


class DeleteWhere(BaseModel):
    changed_since: str = Field(..., description='Filter by changes since date')
    changed_until: Optional[str] = Field(None, description='Filter by changes until date')
    where_filters: Optional[List[Union[WhereFilters, WhereFilters1, WhereFilters2]]] = None


class WhereFilters3(BaseModel):
    column: str = Field(..., description='Column to filter on')
    operator: Optional[Operator] = Field(Operator.eq, description='Filter operator')
    values_from_set: List[str] = Field(..., description='Values to filter by')
    values_from_workspace: Optional[ValuesFromWorkspace] = None
    values_from_storage: Optional[ValuesFromStorage] = None


class WhereFilters4(BaseModel):
    column: str = Field(..., description='Column to filter on')
    operator: Optional[Operator] = Field(Operator.eq, description='Filter operator')
    values_from_set: List[str] = Field(..., description='Values to filter by')
    values_from_workspace: ValuesFromWorkspace
    values_from_storage: Optional[ValuesFromStorage] = None


class WhereFilters5(BaseModel):
    column: str = Field(..., description='Column to filter on')
    operator: Optional[Operator] = Field(Operator.eq, description='Filter operator')
    values_from_set: List[str] = Field(..., description='Values to filter by')
    values_from_workspace: ValuesFromWorkspace
    values_from_storage: ValuesFromStorage


class DeleteWhere1(BaseModel):
    changed_since: Optional[str] = Field(None, description='Filter by changes since date')
    changed_until: str = Field(..., description='Filter by changes until date')
    where_filters: Optional[List[Union[WhereFilters3, WhereFilters4, WhereFilters5]]] = None


class WhereFilters6(BaseModel):
    column: str = Field(..., description='Column to filter on')
    operator: Optional[Operator] = Field(Operator.eq, description='Filter operator')
    values_from_set: List[str] = Field(..., description='Values to filter by')
    values_from_workspace: Optional[ValuesFromWorkspace] = None
    values_from_storage: Optional[ValuesFromStorage] = None


class WhereFilters7(BaseModel):
    column: str = Field(..., description='Column to filter on')
    operator: Optional[Operator] = Field(Operator.eq, description='Filter operator')
    values_from_set: List[str] = Field(..., description='Values to filter by')
    values_from_workspace: ValuesFromWorkspace
    values_from_storage: Optional[ValuesFromStorage] = None


class WhereFilters8(BaseModel):
    column: str = Field(..., description='Column to filter on')
    operator: Optional[Operator] = Field(Operator.eq, description='Filter operator')
    values_from_set: List[str] = Field(..., description='Values to filter by')
    values_from_workspace: ValuesFromWorkspace
    values_from_storage: ValuesFromStorage


class DeleteWhere2(BaseModel):
    changed_since: Optional[str] = Field(None, description='Filter by changes since date')
    changed_until: Optional[str] = Field(None, description='Filter by changes until date')
    where_filters: List[Union[WhereFilters6, WhereFilters7, WhereFilters8]]


class Metadatum(BaseModel):
    key: Optional[str] = Field(None, description='Metadata key')
    value: Optional[str] = Field(None, description='Metadata value')


class ColumnMetadatum(BaseModel):
    key: Optional[str] = Field(None, description='Column metadata key')
    value: Optional[str] = Field(None, description='Column metadata value')


class Base(BaseModel):
    type: str = Field(..., description='Base data type')
    length: Optional[str] = Field(None, description='Type length')
    default: Optional[str] = Field(None, description='Default value')


class DataType(BaseModel):
    base: Base


class SchemaItem(BaseModel):
    name: str = Field(..., description='Column name')
    data_type: Optional[DataType] = None
    nullable: Optional[bool] = Field(True, description='Whether column is nullable')
    primary_key: Optional[bool] = Field(False, description='Whether column is part of primary key')
    distribution_key: Optional[bool] = Field(False, description='Whether column is part of distribution key')
    description: Optional[str] = Field(None, description='Column description')
    metadata: Optional[Dict[str, Any]] = Field(None, description='Column metadata')


class Table(BaseModel):
    destination: str = Field(..., description='Destination table identifier in Storage')
    source: str = Field(..., description='Source table name in component')
    incremental: Optional[bool] = Field(False, description='Whether to perform incremental load')
    primary_key: Optional[List[str]] = Field(None, description="Primary key columns, deprecated, use 'schema' instead")
    columns: Optional[List[str]] = Field(None, description="Columns to include, deprecated, use 'schema' instead")
    distribution_key: Optional[List[str]] = Field(None, description='Distribution key columns')
    delete_where_column: Optional[str] = Field(
        None, description="Column to filter deletions on, deprecated, use 'delete_where' instead"
    )
    delete_where_values: Optional[List[str]] = Field(
        None, description="Values to filter deletions by, deprecated, use 'delete_where' instead"
    )
    delete_where_operator: Optional[DeleteWhereOperator] = Field(
        DeleteWhereOperator.eq, description="Operator for deletion filtering, deprecated, use 'delete_where' instead"
    )
    delete_where: Optional[List[Union[DeleteWhere, DeleteWhere1, DeleteWhere2]]] = None
    delimiter: Optional[str] = Field(',', description='CSV delimiter')
    enclosure: Optional[str] = Field('"', description='CSV enclosure')
    metadata: Optional[List[Metadatum]] = None
    column_metadata: Optional[Dict[str, List[ColumnMetadatum]]] = None
    write_always: Optional[bool] = Field(False, description='Whether to always write the table')
    tags: Optional[List[str]] = Field(None, description='Table tags')
    manifest_type: Optional[str] = Field(None, description='Manifest type')
    has_header: Optional[bool] = Field(None, description='Whether the table has a header row')
    description: Optional[str] = Field(None, description='Table description')
    table_metadata: Optional[Dict[str, Any]] = Field(None, description='Table metadata')
    schema_: Optional[List[SchemaItem]] = Field(None, alias='schema')


class File1(BaseModel):
    tags: Optional[List[str]] = Field(None, description='File tags')
    is_public: Optional[bool] = Field(False, description='Whether the file is public, deprecated')
    is_permanent: Optional[bool] = Field(False, description='Whether the file is permanent')
    is_encrypted: Optional[bool] = Field(True, description='Whether the file is encrypted, deprecated')
    notify: Optional[bool] = Field(False, description='Whether to notify about the file, deprecated')


class TableFile(BaseModel):
    tags: Optional[List[str]] = Field(None, description='Table file tags')
    is_permanent: Optional[bool] = Field(True, description='Whether the table file is permanent')


class Output(BaseModel):
    default_bucket: Optional[str] = Field(None, description='Default bucket for output tables')
    data_type_support: Optional[DataTypeSupport] = Field(None, description='Level of data type support')
    table_modifications: Optional[TableModifications] = Field(None, description='Allowed table modifications')
    treat_values_as_null: Optional[List[str]] = Field(None, description='Values to treat as NULL')
    tables: Optional[List[Table]] = None
    files: Optional[List[File1]] = None
    table_files: Optional[List[TableFile]] = None


class StorageSchema(BaseModel):
    input: Optional[Input] = None
    output: Optional[Output] = None


class Model(BaseModel):
    class Config:
        extra = Extra.allow

    storage: Optional[StorageSchema] = None
