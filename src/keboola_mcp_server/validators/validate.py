"""
Validator functions for Component Configuration data that are generated by agents.
"""

import json
import logging
from enum import Enum
from importlib import resources
from typing import Any

import jsonschema

from keboola_mcp_server.client import JsonDict
from keboola_mcp_server.validators.exceptions import JsonValidationError, StorageConfigurationValidationError

LOG = logging.getLogger(__name__)


RESOURCES_PATH = 'keboola_mcp_server.resources'


class ConfigurationSchemaResourceName(str, Enum):
    STORAGE = 'storage-schema.json'


def validate_storage(storage: JsonDict) -> JsonDict:
    """
    Validate the storage configuration using jsonschema.
    """
    schema = _load_schema(ConfigurationSchemaResourceName.STORAGE)
    _validate_json_against_schema(json_data=storage, schema=schema)
    return storage


def _validate_json_against_schema(json_data: JsonDict, schema: dict[str, Any]) -> bool:
    """Validate JSON data against the provided schema."""
    try:
        jsonschema.validate(instance=json_data, schema=schema)
        return True
    except json.JSONDecodeError as e:
        raise JsonValidationError.from_exception(e, input_data=json_data, json_schema=None)
    except jsonschema.ValidationError as e:
        raise StorageConfigurationValidationError.from_exception(e, input_data=json_data, json_schema=schema)
    except Exception as e:
        raise e


def _load_schema(json_schema_name: ConfigurationSchemaResourceName) -> dict[str, Any]:
    try:
        with resources.files(RESOURCES_PATH).joinpath(json_schema_name.value).open('r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        LOG.exception(f'Schema {json_schema_name.value} not found in the resources.')
        raise FileNotFoundError(f'Schema {json_schema_name.value} not found in the resources.')
    except json.JSONDecodeError as e:
        LOG.exception(f'Schema {json_schema_name.value} is not valid json: {e}')
        raise e  # in this case it is not Agent error, the schema is not valid json
