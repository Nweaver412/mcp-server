"""
Validator functions for Component Configuration data that are generated by agents.
"""

import json
from enum import Enum
from importlib import resources
from typing import Any

import jsonschema

from keboola_mcp_server.client import JsonStruct
from keboola_mcp_server.validators.exceptions import StorageConfigurationValidationError
from keboola_mcp_server.validators.storage_schema import StorageSchema

RESOURCES_PATH = 'keboola_mcp_server.resources'


class ConfigurationSchemaResourceName(str, Enum):
    STORAGE = 'storage-schema.json'


def validate_configuration_jsonschema(configuration: JsonStruct) -> JsonStruct:
    """
    Validate the configuration using jsonschema.
    """
    assert isinstance(configuration, dict)
    if (storage := configuration.get('storage')):
        assert isinstance(storage, dict)
        # validate storage when no exception is raised we can assume that the storage is valid
        _ = validate_storage_jsonschema(storage)
    return configuration


def validate_configuration_pydantic(configuration: JsonStruct) -> JsonStruct:
    """
    Validate the configuration using pydantic.
    """
    assert isinstance(configuration, dict)
    if (storage := configuration.get('storage')):
        assert isinstance(storage, dict)
        # validate storage when no exception is raised we can assume that the storage is valid
        _ = validate_storage_pydantic(storage)
    return configuration


def validate_storage_jsonschema(storage: JsonStruct) -> JsonStruct:
    """
    Validate the storage configuration using jsonschema.
    """
    schema = _load_schema(ConfigurationSchemaResourceName.STORAGE)
    _validate_json_against_schema(json_data=storage, schema=schema)
    return storage


def validate_storage_pydantic(storage: dict[str, Any]) -> dict[str, Any]:
    """
    Validate the storage configuration using pydantic.
    """
    try:
        return StorageSchema.model_validate(storage).model_dump()
    except jsonschema.ValidationError as e:
        raise StorageConfigurationValidationError(e, input=storage, schema=StorageSchema.model_json_schema())


def _validate_json_against_schema(json_data: JsonStruct, schema: dict[str, Any]) -> bool:
    """Validate JSON data against the provided schema."""
    try:
        jsonschema.validate(instance=json_data, schema=schema)
        return True
    except jsonschema.ValidationError as e:
        raise StorageConfigurationValidationError(e, input=json_data, schema=schema)
    except (json.JSONDecodeError, Exception) as e:
        raise e


def _load_schema(json_schema_name: ConfigurationSchemaResourceName) -> dict[str, Any]:
    try:
        with resources.files(RESOURCES_PATH).joinpath(json_schema_name.value).open('r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        raise FileNotFoundError(f'Schema {json_schema_name.value} not found in the resources.')
