"""
Validator functions for Component Configuration data that are generated by agents.
"""

import json
from enum import Enum
from importlib import resources
from typing import Any, Optional

import jsonschema

from keboola_mcp_server.client import JsonPrimitive, JsonStruct
from keboola_mcp_server.validators.exceptions import JsonValidationError, StorageConfigurationValidationError
from keboola_mcp_server.validators.storage_schema import StorageSchema

RESOURCES_PATH = 'keboola_mcp_server.resources'


class ConfigurationSchemaResourceName(str, Enum):
    STORAGE = 'storage-schema.json'


def validate_configuration_jsonschema(configuration: JsonStruct) -> JsonStruct:
    """
    Validate the configuration using jsonschema.
    :param configuration: The configuration to validate.
    :return: The validated configuration.
    """
    assert isinstance(configuration, dict)
    if (storage := _find_value_by_key(configuration, 'storage')):
        assert isinstance(storage, dict)
        # validate storage when no exception is raised we can assume that the storage is valid
        _ = validate_storage_jsonschema(storage)
    return configuration


def validate_configuration_pydantic(configuration: JsonStruct) -> JsonStruct:
    """
    Validate the configuration using pydantic.
    :param configuration: The configuration to validate.
    :return: The validated configuration.
    """
    assert isinstance(configuration, dict)
    if (storage := _find_value_by_key(configuration, 'storage')):
        assert isinstance(storage, dict)
        # validate storage when no exception is raised we can assume that the storage is valid
        _ = validate_storage_pydantic(storage)
    return configuration


def validate_storage_jsonschema(storage: JsonStruct) -> JsonStruct:
    """
    Validate the storage configuration using jsonschema.
    """
    schema = _load_schema(ConfigurationSchemaResourceName.STORAGE)
    _validate_json_against_schema(json_data=storage, schema=schema)
    return storage


def validate_storage_pydantic(storage: dict[str, Any]) -> dict[str, Any]:
    """
    Validate the storage configuration using pydantic.
    """
    try:
        return StorageSchema.model_validate(storage).model_dump()
    except jsonschema.ValidationError as e:
        raise StorageConfigurationValidationError.from_exception(
            e, input_data=storage, json_schema=StorageSchema.model_json_schema()
        )


def _validate_json_against_schema(json_data: JsonStruct, schema: dict[str, Any]) -> bool:
    """Validate JSON data against the provided schema."""
    try:
        jsonschema.validate(instance=json_data, schema=schema)
        return True
    except json.JSONDecodeError as e:
        raise JsonValidationError.from_exception(e, input_data=json_data, json_schema=schema)
    except jsonschema.ValidationError as e:
        raise StorageConfigurationValidationError.from_exception(e, input_data=json_data, json_schema=schema)
    except Exception as e:
        raise e


def _load_schema(json_schema_name: ConfigurationSchemaResourceName) -> dict[str, Any]:
    try:
        with resources.files(RESOURCES_PATH).joinpath(json_schema_name.value).open('r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        raise FileNotFoundError(f'Schema {json_schema_name.value} not found in the resources.')


def _find_value_by_key(configuration: JsonStruct, key: str) -> Optional[JsonStruct | JsonPrimitive]:
    if isinstance(configuration, dict):
        if key in configuration:
            return configuration[key]
        for value in configuration.values():
            if isinstance(value, dict) or isinstance(value, list):
                return _find_value_by_key(value, key)
    elif isinstance(configuration, list):
        for value in configuration:
            if isinstance(value, dict) or isinstance(value, list):
                return _find_value_by_key(value, key)
    return None
