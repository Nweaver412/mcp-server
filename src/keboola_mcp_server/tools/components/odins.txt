# async def create_component_configuration(
#     ctx: Context,
#     name: Annotated[
#         str,
#         Field(
#             description='A short, descriptive name summarizing the purpose of the component configuration.',
#         ),
#     ],
#     description: Annotated[
#         str,
#         Field(
#             description=(
#                 'The detailed description of the component configuration explaining its purpose and functionality.'
#             ),
#         ),
#     ],
#     component_id: Annotated[
#         str,
#         Field(
#             description='The ID of the component for which to create the configuration.',
#         ),
#     ],
#     configuration: Annotated[
#         dict,
#         Field(
#             description='The configuration JSON object containing the component-specific settings.',
#         ),
#     ],
#     configuration_row: Annotated[
#         dict | None,
#         Field(
#             description='Optional configuration row JSON object. If provided, it will be added to the configuration.',
#         ),
#     ] = None,
# ) -> Annotated[
#     ComponentConfiguration,
#     Field(
#         description='Newly created Component Configuration with optional configuration row.',
#     ),
# ]:
#     """
#     Creates a component configuration using the specified name, component ID, configuration JSON, and description.
#     Optionally adds a configuration row if provided.
#     CONSIDERATIONS:
#         The configuration JSON object must follow the configuration schema of the specified component. The
#         configuration JSON object should adhere to the component's configuration examples.
#         If configuration_row is provided, it must follow the configuration row schema of the specified component.

#     USAGE:
#         - Use when you want to create a new configuration for a specific component.
#         - Use when you want to create a new configuration with a configuration row.
#     EXAMPLES:
#         - user_input: `Create a new configuration for component X with these settings`
#             -> set the component_id and configuration parameters accordingly
#             -> returns the created component configuration if successful.
#         - user_input: `Create a new configuration for component X with these settings and this row configuration`
#             -> set the component_id, configuration, and configuration_row parameters accordingly
#             -> returns the created component configuration with the row if successful.
#     """

#     client = KeboolaClient.from_state(ctx.session.state)
#     endpoint = f'branch/{client.storage_client._branch_id}/components/{component_id}/configs'

#     LOG.info(f'Creating new configuration: {name} for component: {component_id}.')
#     # Try to create the new configuration and return the new object if successful
#     # or log an error and raise an exception if not
#     try:
#         new_raw_configuration = await client.post(
#             endpoint,
#             data={
#                 'name': name,
#                 'description': description,
#                 'configuration': configuration,
#             },
#         )

#         component = await _get_component_details(client=client, component_id=component_id)
#         new_configuration = ComponentConfiguration(
#             **new_raw_configuration,
#             component_id=component_id,
#             component=component,
#         )

#         LOG.info(
#             f'Created new configuration for component "{component_id}" with configuration id '
#             f'"{new_configuration.configuration_id}".'
#         )

#         # If configuration_row is provided, add it to the configuration
#         if configuration_row is not None:
#             rows_endpoint = f'branch/{client.storage_client._branch_id}/components/{component_id}/configs/{new_configuration.configuration_id}/rows'
#             await client.post(
#                 rows_endpoint,
#                 data={
#                     'configuration': configuration_row,
#                 },
#             )
#             LOG.info(
#                 f'Added configuration row to configuration "{new_configuration.configuration_id}" for component "{component_id}".'
#             )

#         return new_configuration
#     except Exception as e:
#         LOG.exception(f'Error when creating new component configuration: {e}')
#         raise e


# async def get_component_configuration_examples(
#     ctx: Context,
#     component_id: Annotated[
#         str,
#         Field(
#             description='The ID of the component to get configuration examples for.',
#         ),
#     ],
# ) -> Annotated[
#     str,
#     Field(
#         description='Markdown formatted string containing configuration examples for the component.',
#     ),
# ]:
#     """
#     Retrieves sample configuration examples for a specific component from a JSONL file.
#     USAGE:
#         - Use when you want to see example configurations for a specific component.
#     EXAMPLES:
#         - user_input: `Show me example configurations for component X`
#             -> set the component_id parameter accordingly
#             -> returns a markdown formatted string with configuration examples
#     """
#     import json
#     from pathlib import Path

#     # Construct the path to the JSONL file TODO: fix the path somehow
#     jsonl_path = Path("json-schemas/output") / f"sample_data_{component_id}.jsonl"

#     if not jsonl_path.exists():
#         return f"No configuration examples found for component {component_id}"

#     # Read and parse the JSONL file
#     examples = []
#     with open(jsonl_path, 'r', encoding='utf-8') as f:
#         for line in f:
#             line = line.strip()
#             if not line:  # Skip empty lines
#                 continue
#             try:
#                 data = json.loads(line)
#                 if data.get('component_id') == component_id and data.get('config_example'):
#                     example = {
#                         'config_example': data['config_example'],
#                         'config_row_example': data['config_row_example'],
#                     }
#                     examples.append(example)
#             except json.JSONDecodeError:
#                 continue  # Skip lines that are not valid JSON

#     if not examples:
#         return f"No configuration examples found for component {component_id}"

#     # Format the examples as a markdown list
#     markdown = "Configuration examples\n\n"
#     for i, example in enumerate(examples, 1):
#         markdown += f"{i}. Configuration:\n```json\n{json.dumps(example['config_example'], indent=2)}\n```\n"
#         if example['config_row_example']:
#             markdown += f"   Configuration Row:\n```json\n{json.dumps(example['config_row_example'], indent=2)}\n```\n"
#         markdown += "\n"

#     return markdown


# # ############################# End of component tools #########################################
