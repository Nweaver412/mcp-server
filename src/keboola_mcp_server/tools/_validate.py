"""
Validator functions for Component Configuration data that are generated by agents.
"""

import json
import logging
from enum import Enum
from importlib import resources
from typing import Any, Optional

import jsonschema

from keboola_mcp_server.client import JsonDict

LOG = logging.getLogger(__name__)


RESOURCES_PATH = 'keboola_mcp_server.resources'


class ConfigurationSchemaResourceName(str, Enum):
    STORAGE = 'storage-schema.json'


STORAGE_VALIDATION_INITIAL_MESSAGE = 'The provided storage configuration input does not follow the storage schema.\n'
ROOT_PARAMETERS_VALIDATION_INITIAL_MESSAGE = (
    'The provided Root parameters configuration input does not follow the Root parameter json schema for component '
    'id: {component_id}.\n'
)
ROW_PARAMETERS_VALIDATION_INITIAL_MESSAGE = (
    'The provided Row parameters configuration input does not follow the Row parameter json schema for component '
    'id: {component_id}.\n'
)


class RecoverableValidationError(jsonschema.ValidationError):
    """
    An instance was invalid under a provided schema using a recoverable message for the Agent.
    """

    _RECOVERY_INSTRUCTIONS = (
        'Recovery instructions:\n'
        '- Please check the json schema.\n'
        '- Fix the errors in your input data to follow the schema.\n'
    )

    def __init__(self, *args, invalid_json: Optional[JsonDict] = None, initial_message: Optional[str] = None, **kwargs):
        super().__init__(*args, **kwargs)
        self.invalid_json = invalid_json
        self.initial_message = initial_message

    @classmethod
    def create_from_values(
        cls,
        other: jsonschema.ValidationError,
        invalid_json: Optional[JsonDict] = None,
        initial_message: Optional[str] = None,
    ):
        return cls(**other._contents(), invalid_json=invalid_json, initial_message=initial_message)

    def __str__(self) -> str:
        """
        Builds a string representation of the error with recovery instructions.
        Following points describe the order of the error message:
        - message = super().__str__() represents the original error message, so it starts with the error message.
        - message += initial_message if provided, it adds the initial message to the error message.
        - message += recovery instructions from _RECOVERY_INSTRUCTIONS
        - message += invalid_json if provided, it adds the invalid json input data to the error message.

        Example output (init_message="The provided storage configuration is not valid."):
            RecoverableValidationError: 'destination' is a required property
            ...parent error message (containing the violated part of the json schema)...

            The provided storage configuration is not valid.
            Recovery instructions:
            - Please check the json schema.
            - Fix the errors in your input data to follow the schema.

            Invalid input data:
            {
            "storage": {...}
            }
        """
        str_repr = f'{super().__str__()}\n'
        if self.initial_message:
            str_repr += f'{self.initial_message}\n'
        str_repr += f'{self._RECOVERY_INSTRUCTIONS}\n'
        if self.invalid_json:
            str_repr += f'\nInvalid input data:\n{json.dumps(self.invalid_json, indent=2)}\n'
        return str_repr.rstrip()


def validate_storage(storage: JsonDict, initial_message: Optional[str] = None) -> JsonDict:
    """
    Validate the storage configuration using jsonschema.

    """
    schema = _load_schema(ConfigurationSchemaResourceName.STORAGE)
    expected_input_data = {'storage': storage.get('storage', storage)}
    _validate_json_against_schema(
        json_data=expected_input_data,
        schema=schema,
        initial_message=initial_message or STORAGE_VALIDATION_INITIAL_MESSAGE,
    )
    return storage


def validate_root_parameters(
    parameters: JsonDict, component_id: str, schema: JsonDict, initial_message: Optional[str] = None
) -> JsonDict:
    """
    Validate the parameters configuration using jsonschema.
    """
    parameters = {'parameters': parameters.get('parameters', parameters)}
    _validate_json_against_schema(
        json_data=parameters,
        schema=schema,
        initial_message=initial_message or ROOT_PARAMETERS_VALIDATION_INITIAL_MESSAGE.format(component_id=component_id),
    )
    return parameters


def validate_row_parameters(
    parameters: JsonDict, component_id: str, schema: JsonDict, initial_message: Optional[str] = None
) -> JsonDict:
    """
    Validate the parameters row configuration using jsonschema.
    """
    parameters = {'parameters': parameters.get('parameters', parameters)}
    _validate_json_against_schema(
        json_data=parameters,
        schema=schema,
        initial_message=initial_message or ROW_PARAMETERS_VALIDATION_INITIAL_MESSAGE.format(component_id=component_id),
    )
    return parameters


def _validate_json_against_schema(
    json_data: JsonDict, schema: dict[str, Any], initial_message: Optional[str] = None
) -> bool:
    """Validate JSON data against the provided schema."""
    try:
        jsonschema.validate(instance=json_data, schema=schema)
        return True
    except jsonschema.ValidationError as e:
        raise RecoverableValidationError.create_from_values(e, invalid_json=json_data, initial_message=initial_message)
    except jsonschema.SchemaError as e:
        err_msg = (
            f'The validation schema is not valid: {e} \n'
            f'initial_message: {initial_message}\n'
            f'schema: {schema}\n'
            f'json_data: {json_data}'
        )
        LOG.error(f'{err_msg}')
        raise jsonschema.SchemaError(f'{e}\n{err_msg}')  # this is not an Agent error, the schema is not valid
    except Exception as e:
        raise e  # unsupported error


def _load_schema(json_schema_name: ConfigurationSchemaResourceName) -> dict[str, Any]:
    try:
        with resources.files(RESOURCES_PATH).joinpath(json_schema_name.value).open('r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        LOG.exception(f'Schema {json_schema_name.value} not found in the package resources.')
        raise FileNotFoundError(f'Schema {json_schema_name.value} not found in the package resources.')
    except json.JSONDecodeError as e:
        LOG.exception(f'Schema {json_schema_name.value} is not valid json: {e}')
        raise e  # in this case it is not Agent error, the schema is not valid json
